[ { "title": "Test Flutter app with Appium", "url": "/posts/test-flutter-app-with-appium/", "categories": "Flutter, Ruby", "tags": "dart, flutter, ruby, test, appium", "date": "2022-01-19 12:23:06 -0500", "snippet": "appium flutter driverEnviromentFlutter (Channel stable, 2.8.1)ruby 3.1.0p0appium-flutter-driver@0.0.34Install Appium# shellnpm install -g appiumnpm install -g appium-flutter-drivernpm install -g appium-doctor# verify installappium-doctor# run serverappiumPrepare Flutter demo project# shellmkdir FlutterAppiumcd FlutterAppium# create a flutter demo projectflutter create demoAdd integration_test# pubspec.yamldev_dependencies: flutter_test: sdk: flutter integration_test: sdk: flutterInstall packages# shellpub getModify main.dart, add enableFlutterDriverExtension// main.dartimport &#39;package:flutter/material.dart&#39;;import &#39;package:flutter_driver/driver_extension.dart&#39;;void main() { enableFlutterDriverExtension(); // Add it before runApp runApp(const MyApp());}Add ValueKey for counter result widget:// main.dartText( &#39;$_counter&#39;, style: Theme.of(context).textTheme.headline4, key: const ValueKey(&#39;counter&#39;), // Add value key),Compile a debug apk:# shellflutter build apk --debugWe will get an app-debug.apk, and we will use this apk to run the test.Prepare ruby test codeMake sure you have already installed ruby and bundler.# shellcd ..mkdir testcd test# Generate Gemfilebundle initAdd gems to Gemfile# Gemfile# frozen_string_literal: truesource &quot;https://rubygems.org&quot;gem &#39;appium_flutter_finder&#39;gem &#39;appium_lib_core&#39;gem &#39;minitest&#39;Install gems:# shellbundle installAdd test code:# android_app_test.rbrequire &#39;appium_lib_core&#39;require &#39;appium_flutter_finder&#39;require &#39;minitest/autorun&#39;class ExampleTests &amp;lt; Minitest::Test include ::Appium::Flutter::Finder ANDROID_CAPS = { caps: { platformName: &#39;Android&#39;, automationName: &#39;flutter&#39;, deviceName: &#39;Pixel 2&#39;, app: &quot;../demo/build/app/outputs/flutter-apk/app-debug.apk&quot; }, appium_lib: { export_session: true, wait_timeout: 20, wait_interval: 1 } }.freeze def test_run_example_android_scenario @core = ::Appium::Core.for(ANDROID_CAPS) @driver = @core.start_driver @driver.execute_script &#39;flutter:getRenderTree&#39; assert_equal &#39;ok&#39;, @driver.execute_script(&#39;flutter:checkHealth&#39;, {}) # Find and click FloatingActionButton tooltip_finder = by_tooltip &#39;Increment&#39; @driver.execute_script(&#39;flutter:waitFor&#39;, tooltip_finder, 100) floating_button_element = ::Appium::Flutter::Element.new(@driver, finder: tooltip_finder) floating_button_element.click # Confirm the count result counter_finder = by_value_key &#39;counter&#39; counter_element = ::Appium::Flutter::Element.new(@driver, finder: counter_finder) assert_equal &#39;1&#39;, counter_element.text endendRun an Android emulator from Android Studio or command line, then run command to test the app.# shellruby android_app_test.rbWe will get the test result:Appium@nextNext, we will try to use latest appium 2.x.EnviromentAppium v2.0.0-beta.24Install appium# shellnpm install -g appium@nextappium driver install flutter# confirm installappium driver list --installed# run appium serverappiumAll other steps are the same as appium flutter driver, except we add the server_url in configuration:# android_app_test.rbappium_lib: { server_url: &#39;http://127.0.0.1:4723&#39;, // Add server url export_session: true, wait_timeout: 20, wait_interval: 1}Run test# shellruby android_app_test.rbRead morehttps://github.com/appium/ruby_libhttps://github.com/appium-userland/appium-flutter-driver" }, { "title": "ClickHouse in Rails", "url": "/posts/clickhouse-in-rails/", "categories": "Rails", "tags": "ruby, rails, database", "date": "2021-11-15 15:20:06 -0500", "snippet": "BackgroundClickHouse is an open-source column-oriented DBMS (columnar database management system) for online analytical processing (OLAP) that allows users to generate analytical reports using SQL queries in real-time.Let’s try to setup ClickHouse connection in Rails as a second database.Rails 6.1ruby 3.0.2ClickHouse version 21.12Install ClickHouse on MacOSXmkdir -p /Applications/ClickHousecd /Applications/ClickHousewget &#39;https://builds.clickhouse.com/master/macos/clickhouse&#39;chmod a+x ./clickhouse// Add a soft link to /usr/local/binln -s /Applications/ClickHouse/clickhouse /usr/local/bin// Run the serverclickhouse serverOpen a new Terminal window to test the connection:clickhouse clientshow databases;Rails IntegrationPrepare a new rails project:rails new house -d=mysqlAdd the gem clickhouse-activerecord to Gemfile, and then run bundle command:gem &#39;clickhouse-activerecord&#39;Modify database.yml to support multiple databases. Add two databases: primary and clickhouse under development.development: primary: &amp;lt;&amp;lt;: *default database: house_development clickhouse: adapter: clickhouse database: house_development_clickhouse host: 127.0.0.1 port: 8123 username: default debug: true migrations_paths: db/clickhouse_migrateModel for ClickHouseCreate databases for primary and clickhouse:rake db:createAdd a new model which connects to ClickHouse with --database:bin/rails g model Event name:string speed:float --database clickhouserake db:migrateWe will get two model files: clickhouse_record.rb and events.rbContent of clickhouse_record.rb:class ClickhouseRecord &amp;lt; ApplicationRecord self.abstract_class = true connects_to database: { writing: :clickhouse }endContent of events.rb:class Event &amp;lt; ClickhouseRecordendVisit ClickHouse client to make sure we have the database and table:clickhouse clientshow databases;use house_development_clickhouse;show tables;We will find out the database and the table.Use ClickHouse in RailsLet’s try something fun with ClickHouse:bin/rails console// Create 3 eventsEvent.create(name: &#39;a&#39;, speed: 1.2)Event.create(name: &#39;b&#39;, speed: 1.8)Event.create(name: &#39;c&#39;, speed: 3.6)// CalculateEvent.sum(:speed)Event.average(:speed)Read more ClickHouse Gem: Clickhouse Activerecord Rails: multiple databases" }, { "title": "Instagram like Listview in Flutter", "url": "/posts/instagram-like-list-view-in-flutter/", "categories": "Flutter, UX", "tags": "dart, flutter, UX", "date": "2021-11-15 09:21:06 -0500", "snippet": "In this article, we will simulate an Instagram search page. We will use a snap Listview for this task. Flutter (Channel stable, 2.5.3)Setup a new projectflutter create list_view_snapAfter removing some code we don’t use, we have a clear main.dart and an empty page. Let’s start from here.import &#39;package:flutter/material.dart&#39;;void main() { runApp(const MyApp());}class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp(debugShowCheckedModeBanner: false, home: MyHomePage()); }}class MyHomePage extends StatefulWidget { const MyHomePage({Key? key}) : super(key: key); @override State&amp;lt;MyHomePage&amp;gt; createState() =&amp;gt; _MyHomePageState();}class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; { @override Widget build(BuildContext context) { return Scaffold(body: Container()); }}Add a List ViewLet’s add a random color method for better UI:import &#39;dart:math&#39;;Color get randomColor =&amp;gt; Color((Random().nextDouble() * 0xFFFFFF).toInt() &amp;lt;&amp;lt; 0).withOpacity(1.0);Build a vertical listview:ListView.builder( scrollDirection: Axis.vertical, itemCount: 20, itemBuilder: (context, index) { return Container( width: double.infinity, height: 400, color: randomColor, margin: const EdgeInsets.all(20.0), ); },)The full code of main.dart:import &#39;dart:math&#39;;import &#39;package:flutter/material.dart&#39;;void main() { runApp(const MyApp());}class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp(debugShowCheckedModeBanner: false, home: MyHomePage()); }}class MyHomePage extends StatefulWidget { const MyHomePage({Key? key}) : super(key: key); @override State&amp;lt;MyHomePage&amp;gt; createState() =&amp;gt; _MyHomePageState();}class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; { Color get randomColor =&amp;gt; Color((Random().nextDouble() * 0xFFFFFF).toInt() &amp;lt;&amp;lt; 0).withOpacity(1.0); Widget buildBody() { return ListView.builder( scrollDirection: Axis.vertical, itemCount: 20, itemBuilder: (context, index) { return Container( width: double.infinity, height: 400, color: randomColor, margin: const EdgeInsets.all(20.0), ); }, ); } @override Widget build(BuildContext context) { return Scaffold(body: buildBody()); }} Add Snap for ListviewWe need a snap physics which is similar to PageScrollPhysics.SnapScrollPhysicsclass SnapScrollPhysics extends ScrollPhysics { final double itemDimension; const SnapScrollPhysics({required this.itemDimension, ScrollPhysics? parent}) : super(parent: parent); @override SnapScrollPhysics applyTo(ScrollPhysics? ancestor) { return SnapScrollPhysics(itemDimension: itemDimension, parent: buildParent(ancestor)); } double _getPage(ScrollMetrics position) { return position.pixels / itemDimension; } double _getPixels(double page) { return page * itemDimension; } double _getTargetPixels(ScrollMetrics position, Tolerance tolerance, double velocity) { double page = _getPage(position); if (velocity &amp;lt; -tolerance.velocity) { page -= 0.5; } else if (velocity &amp;gt; tolerance.velocity) { page += 0.5; } return _getPixels(page.roundToDouble()); } @override Simulation? createBallisticSimulation(ScrollMetrics position, double velocity) { if ((velocity &amp;lt;= 0.0 &amp;amp;&amp;amp; position.pixels &amp;lt;= position.minScrollExtent) || (velocity &amp;gt;= 0.0 &amp;amp;&amp;amp; position.pixels &amp;gt;= position.maxScrollExtent)) { return super.createBallisticSimulation(position, velocity); } final Tolerance tolerance = this.tolerance; final double target = _getTargetPixels(position, tolerance, velocity); if (target != position.pixels) { return ScrollSpringSimulation(spring, position.pixels, target, velocity, tolerance: tolerance); } return null; } @override bool get allowImplicitScrolling =&amp;gt; false;}Use the SnapScrollPhysicsThen in Listview, we use the SnapScrollPhysics. The itemDimension is the height of the container with the margin.ListView.builder( scrollDirection: Axis.vertical, itemCount: 20, physics: const SnapScrollPhysics(itemDimension: 440), itemBuilder: (context, index) { return Container( width: double.infinity, height: 400, color: randomColor, margin: const EdgeInsets.all(20.0), ); },) Go furtherAdd a special headerHow about if we need a header on the first page? Let’s do this.Step 1: Add an extra element in Listview for the header.const double headerHeight = 200.0;itemBuilder: (context, index) { if (index == 0) { return Container( width: double.infinity, height: headerHeight, color: Colors.amberAccent, margin: const EdgeInsets.all(20.0), child: const Center(child: Text(&#39;The header&#39;, style: TextStyle(fontSize: 30))), ); } // ...} Step 2: modify the SnapScrollPhysics to support an extra header element.We add headerDimension for the ScrollPhysics to know the height of the header and modify _getPage and _getPixels.final double headerDimension;const SnapScrollPhysics({required this.itemDimension, this.headerDimension = 0, ScrollPhysics? parent}) : super(parent: parent);@override SnapScrollPhysics applyTo(ScrollPhysics? ancestor) { return SnapScrollPhysics( itemDimension: itemDimension, headerDimension: headerDimension, parent: buildParent(ancestor));} double _getPage(ScrollMetrics position) { if (position.pixels &amp;lt;= headerDimension) { return position.pixels / headerDimension; } return (position.pixels - headerDimension) / itemDimension + 1;}double _getPixels(double page) { if (page &amp;lt; 1) { return 0; } return (page - 1) * itemDimension + headerDimension;} Add pull refreshStep 1: Install pull_to_refreshStep 2: Add pull refreshfinal RefreshController refreshController = RefreshController(initialRefresh: false);void onRefresh() async { await Future.delayed(const Duration(milliseconds: 1000)); refreshController.refreshCompleted();}void onLoading() async { await Future.delayed(const Duration(milliseconds: 1000)); refreshController.loadComplete();}@overrideWidget build(BuildContext context) { return Scaffold( body: SmartRefresher( enablePullDown: true, enablePullUp: true, header: const WaterDropHeader(), controller: refreshController, onRefresh: onRefresh, onLoading: onLoading, child: buildBody(), ), );} The full code of main.dart." } ]
